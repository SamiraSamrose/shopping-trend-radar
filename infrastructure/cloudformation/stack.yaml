# infrastructure/cloudformation/stack.yaml
# CloudFormation stack for Shopping Trend Radar

AWSTemplateFormatVersion: '2010-09-09'
Description: 'Shopping Trend Radar Agent - Complete Infrastructure Stack'

Parameters:
  Environment:
    Type: String
    Default: production
    AllowedValues:
      - development
      - staging
      - production
    Description: Environment name

  S3BucketName:
    Type: String
    Default: shopping-trend-radar-data
    Description: S3 bucket name for data storage

  DatabasePassword:
    Type: String
    NoEcho: true
    Description: RDS database password
    MinLength: 8

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-vpc

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-igw

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-2

  # S3 Bucket
  DataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  # ECR Repository
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: shopping-trend-radar
      ImageScanningConfiguration:
        ScanOnPush: true
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [{
              "rulePriority": 1,
              "description": "Keep last 10 images",
              "selection": {
                "tagStatus": "any",
                "countType": "imageCountMoreThan",
                "countNumber": 10
              },
              "action": {
                "type": "expire"
              }
            }]
          }

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: trend-radar-cluster
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  # DynamoDB Tables
  ProductsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: TrendRadarProducts
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: category
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: CategoryIndex
          KeySchema:
            - AttributeName: category
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  AlertsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: TrendRadarAlerts
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: TrendRadarLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt DataBucket.Arn
                  - !Sub ${DataBucket.Arn}/*
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt ProductsTable.Arn
                  - !GetAtt AlertsTable.Arn
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeAgent
                Resource: '*'
              - Effect: Allow
                Action:
                  - sagemaker:InvokeEndpoint
                Resource: '*'

  # Lambda Functions
  DashboardGeneratorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: trend-radar-dashboard-generator
      Runtime: python3.11
      Handler: dashboard_generator.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref S3BucketName
          PRODUCTS_TABLE: !Ref ProductsTable
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': json.dumps('Hello from Lambda!')}

  TrendAnalyzerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: trend-radar-analyzer
      Runtime: python3.11
      Handler: trend_analyzer.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      MemorySize: 1024
      Environment:
        Variables:
          PRODUCTS_TABLE: !Ref ProductsTable
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': json.dumps('Analyzer running')}

  AlertNotifierFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: trend-radar-alert-notifier
      Runtime: python3.11
      Handler: alert_notifier.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          ALERTS_TABLE: !Ref AlertsTable
          PRODUCTS_TABLE: !Ref ProductsTable
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': json.dumps('Notifier running')}

  # EventBridge Rules
  HourlyDashboardRule:
    Type: AWS::Events::Rule
    Properties:
      Name: trend-radar-hourly-dashboard
      ScheduleExpression: rate(1 hour)
      State: ENABLED
      Targets:
        - Arn: !GetAtt DashboardGeneratorFunction.Arn
          Id: DashboardGeneratorTarget

  TrendAnalyzerRule:
    Type: AWS::Events::Rule
    Properties:
      Name: trend-radar-analyzer
      ScheduleExpression: rate(30 minutes)
      State: ENABLED
      Targets:
        - Arn: !GetAtt TrendAnalyzerFunction.Arn
          Id: TrendAnalyzerTarget

  AlertCheckRule:
    Type: AWS::Events::Rule
    Properties:
      Name: trend-radar-alert-check
      ScheduleExpression: rate(5 minutes)
      State: ENABLED
      Targets:
        - Arn: !GetAtt AlertNotifierFunction.Arn
          Id: AlertNotifierTarget

  # Lambda Permissions for EventBridge
  DashboardGeneratorPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DashboardGeneratorFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt HourlyDashboardRule.Arn

  TrendAnalyzerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref TrendAnalyzerFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt TrendAnalyzerRule.Arn

  AlertNotifierPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AlertNotifierFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt AlertCheckRule.Arn

  # SNS Topic for Notifications
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: trend-radar-notifications
      DisplayName: Shopping Trend Radar Notifications

  # CloudWatch Log Groups
  DashboardGeneratorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/trend-radar-dashboard-generator
      RetentionInDays: 7

  TrendAnalyzerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/trend-radar-analyzer
      RetentionInDays: 7

  AlertNotifierLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/trend-radar-alert-notifier
      RetentionInDays: 7

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-VPC

  S3BucketName:
    Description: S3 Bucket Name
    Value: !Ref DataBucket
    Export:
      Name: !Sub ${AWS::StackName}-S3Bucket

  ECRRepositoryUri:
    Description: ECR Repository URI
    Value: !GetAtt ECRRepository.RepositoryUri
    Export:
      Name: !Sub ${AWS::StackName}-ECRRepository

  ECSClusterName:
    Description: ECS Cluster Name
    Value: !Ref ECSCluster
    Export:
      Name: !Sub ${AWS::StackName}-ECSCluster

  ProductsTableName:
    Description: DynamoDB Products Table Name
    Value: !Ref ProductsTable
    Export:
      Name: !Sub ${AWS::StackName}-ProductsTable

  AlertsTableName:
    Description: DynamoDB Alerts Table Name
    Value: !Ref AlertsTable
    Export:
      Name: !Sub ${AWS::StackName}-AlertsTable

  DashboardGeneratorFunctionArn:
    Description: Dashboard Generator Lambda ARN
    Value: !GetAtt DashboardGeneratorFunction.Arn
    Export:
      Name: !Sub ${AWS::StackName}-DashboardFunction

  NotificationTopicArn:
    Description: SNS Topic ARN
    Value: !Ref NotificationTopic
    Export:
      Name: !Sub ${AWS::StackName}-NotificationTopic
